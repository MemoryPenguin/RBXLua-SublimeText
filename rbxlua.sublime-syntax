%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: ROBLOX Lua
file_extensions:
  - rbxs
  - lua
scope: source.rbxlua

variables:
  string_escape_characters: '\b%(a|A|c|C|d|D|l|L|p|P|s|S|u|U|w|W|x|X|z|Z)'
  identifier: '[A-Za-z]\w*'

contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.rbxlua
      push: double_quoted_string

    - match: "'"
      scope: punctuation.definition.string.begin.rbxlua
      push: single_quoted_string

    - match: '--\[\['
      scope: punctuation.definition.comment.rbxlua
      push: block_comment

    - match: '--'
      scope: punctuation.definition.comment.rbxlua
      push: line_comment

    - match: '\b(if|else|for|while)\b'
      scope: keyword.control.rbxlua

    # Numbers
    - match: '\b(-)?\d*\.\d+\b'
      scope: constant.numeric.rbxlua

    - match: '\b-?0x[\da-fA-F]+\b'
      scope: constant.numeric.hex.rbxlua

    - match: '\b[-\d\.]+[eE][-\d\.]+\b'
      scope: constant.numeric.scientific.rbxlua

    # Language constants
    - match: '\btrue|false|nil\b'
      scope: constant.language.rbxlua

    # Control keywords
    - match: '\b(break|do|end|for|in|or|repeat|return|while)\b'
      scope: keyword.control.rbxlua

    # Conditional keywords
    - match: '\b(if|then|else|elseif|until)\b'
      scope: keyword.control.conditional.rbxlua

    # Builtins
    - match: '\b(game|workspace|script|plugin|_VERSION|_G|math\.(huge|pi)|self)\b'
      scope: variable.language.rbxlua

    # Builtin functions
    - match: '\bprint|warn|error|assert|collectgarbage|dofile|gcinfo|getfenv|getmetatable|ipairs|load|loadfile|loadstring|newproxy|next|pairs|pcall|rawequal|rawget|rawset|select|setfenv|setmetatable|tonumber|type|unpack|xpcall|[dD]elay|ElapsedTime|LoadLibrary|require|[sS]pawn|tick|time|UserSettings|Version|wait|ypcall|DebuggerManager|PluginManager|settings|stats|\bmath\.(?:abs|acos|asin|atan|atan2|ceil|cos|cosh|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|noise|pow|rad|random|randomseed|sin|sinh|sqrt|tan|tanh)|coroutine\.(?:create|resume|running|status|wrap|yield)|string\.(?:byte|char|dump|find|format|len|lower|match|rep|reverse|sub|upper|gmatch|gsub)|table\.(?:concat|insert|remove|sort)\b'
      scope: variable.function.builtin.rbxlua

    # Deprecated table functions
    - match: '\btable\.(foreach|foreachi|getn|maxn|setn)\b'
      scope: invalid.deprecated.rbxlua


    # Logical word operators
    - match: '\b(and|or|not)\b'
      scope: keyword.operator.word.rbxlua

    # Logical operators
    - match: '\b((<|>)=?|~=|==)\b'
      scope: keyword.operator.logical.rbxlua

    # Arithmetic operators
    - match: '\b(\+|-|\*|%|\^)\b'
      scope: keyword.operator.arithmetic.rbxlua

    # Assignment operator
    - match: '\b=\b'
      scope: keyword.operator.assignment.rbxlua

    # Miscellaneous operators
    - match: '(\(|\)|\{|\}|\[|\]|;|:|,|\.{1,3})'
      scope: keyword.operator.rbxlua

  double_quoted_string:
    - meta_scope: string.quoted.double.rbxlua
    - match: '\\.'
      scope: constant.character.escape.rbxlua
    - match: '"'
      scope: punctuation.definition.string.end.rbxlua
      pop: true
    - match: '{{string_escape_characters}}'
      scope: constant.character.escape

  single_quoted_string:
    - meta_scope: string.quoted.single.rbxlua
    - match: '\\.'
      scope: constant.character.escape.rbxlua
    - match: "'"
      scope: punctuation.definition.string.end.rbxlua
      pop: true
    - match: '{{string_escape_characters}}'
      scope: constant.character.escape

  line_comment:
    - meta_scope: comment.line.rbxlua
    - match: $
      pop: true

  block_comment:
    - meta_scope: comment.block.rbxlua
    - match: '\]\]'
      pop: true